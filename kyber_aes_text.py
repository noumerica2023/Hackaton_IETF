# -*- coding: utf-8 -*-
"""kyber_AES_Text.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wGFs3aBd5NAD5wtrrMluku_rjSfKS-ql
"""

!pip install pycryptodome

!git clone https://github.com/giacomopope/kyber-py.git

# Commented out IPython magic to ensure Python compatibility.
# %cd kyber-py
!pip install -r requirements.txt

from kyber import Kyber512

from kyber import Kyber512
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes

# Function to write binary data to a file
def write_file(file_path, data):
    with open(file_path, 'wb') as f:
        f.write(data)

# Function to read text from a file
def read_text(file_path):
    with open(file_path, 'r') as f:
        return f.read()

# Function to encrypt text data
def encrypt_text(text_data, key):
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(text_data.encode('utf-8'))
    return cipher.nonce, tag, ciphertext

# Paths to your input and output files
text_path = '/content/Patient.txt'  # Update with your text file path
encrypted_text_path = 'encrypted_text.bin'

# Kyber key generation
pk, sk = Kyber512.keygen()

# Encapsulate the AES key using Kyber
c, aes_key = Kyber512.enc(pk)

# Save the ciphertext and Kyber secret key to files
with open('ciphertext.bin', 'wb') as f:
    f.write(c)

with open('secret_key.bin', 'wb') as f:
    f.write(sk)

# Read the original text
original_text_data = read_text(text_path)

# Encrypt the text
nonce, tag, encrypted_data = encrypt_text(original_text_data, aes_key)
write_file(encrypted_text_path, nonce + tag + encrypted_data)

print("Text encrypted and AES key encapsulated using Kyber. Data saved to files.")

from kyber import Kyber512
from Crypto.Cipher import AES

# Function to read binary data from a file
def read_file(file_path):
    with open(file_path, 'rb') as f:
        return f.read()

# Function to write text data to a file
def write_text(file_path, data):
    with open(file_path, 'w') as f:
        f.write(data)

# Function to decrypt text data
def decrypt_text(nonce, tag, ciphertext, key):
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    decrypted_data = cipher.decrypt_and_verify(ciphertext, tag)
    return decrypted_data.decode('utf-8')

# Paths to your input and output files
encrypted_text_path = 'encrypted_text.bin'
decrypted_text_path = 'decrypted_text.txt'

# Load the Kyber secret key
sk = read_file('secret_key.bin')

# Load the ciphertext
c = read_file('ciphertext.bin')

# Decapsulate the AES key using Kyber
aes_key = Kyber512.dec(c, sk)

# Read the encrypted data from the file
with open(encrypted_text_path, 'rb') as f:
    nonce = f.read(16)
    tag = f.read(16)
    ciphertext = f.read()

# Decrypt the text
decrypted_text_data = decrypt_text(nonce, tag, ciphertext, aes_key)
write_text(decrypted_text_path, decrypted_text_data)

print("Text decrypted and saved to", decrypted_text_path)