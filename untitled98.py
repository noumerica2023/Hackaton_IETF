# -*- coding: utf-8 -*-
"""Untitled98.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eI5YlsrDVmYfXO56SC-z1dfhFfU3j6Yp
"""

!pip install pycryptodome

!git clone https://github.com/giacomopope/kyber-py.git

# Commented out IPython magic to ensure Python compatibility.
# %cd kyber-py
!pip install -r requirements.txt

!pip install .

from kyber import Kyber512

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

# Function to read an image file and return its byte data
def read_image(file_path):
    with open(file_path, 'rb') as f:
        return f.read()

# Function to write binary data to a file
def write_file(file_path, data):
    with open(file_path, 'wb') as f:
        f.write(data)

# Encrypt the image data
def encrypt_image(image_data, key):
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(image_data)
    return cipher.nonce, tag, ciphertext

# Paths to your input and output files
image_path = '/content/OIP.jpg'  # Update with your image path
encrypted_image_path = 'encrypted_image.bin'

# Generate a random key
key = get_random_bytes(16)  # AES-128

# Read the original image
original_image_data = read_image(image_path)

# Encrypt the image
nonce, tag, encrypted_data = encrypt_image(original_image_data, key)
write_file(encrypted_image_path, nonce + tag + encrypted_data)

# Save the key for decryption
with open('key.bin', 'wb') as f:
    f.write(key)

# Visual representation of the encrypted data
encrypted_image_visual = np.frombuffer(encrypted_data, dtype=np.uint8)
height = int(np.sqrt(encrypted_image_visual.size))
width = (encrypted_image_visual.size + height - 1) // height  # Ensure width is enough to hold all data
encrypted_image_visual = np.resize(encrypted_image_visual, (height, width))

# Load the original image using PIL
original_image = Image.open(image_path)

# Display the original and encrypted images
plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.title("Original Image")
plt.imshow(original_image)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title("Encrypted Data (Visual Representation)")
plt.imshow(encrypted_image_visual, cmap='gray', aspect='auto')
plt.axis('off')

plt.show()

print(f"Image encrypted and saved to {encrypted_image_path}")

from Crypto.Cipher import AES
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

# Function to write binary data to a file
def write_file(file_path, data):
    with open(file_path, 'wb') as f:
        f.write(data)

# Decrypt the image data
def decrypt_image(nonce, tag, ciphertext, key):
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    decrypted_data = cipher.decrypt_and_verify(ciphertext, tag)
    return decrypted_data

# Paths to your input and output files
encrypted_image_path = 'encrypted_image.bin'
decrypted_image_path = 'decrypted_image.png'

# Load the key for decryption
with open('key.bin', 'rb') as f:
    key = f.read()

# Read the encrypted data from the file
with open(encrypted_image_path, 'rb') as f:
    nonce = f.read(16)
    tag = f.read(16)
    ciphertext = f.read()

# Decrypt the image
decrypted_image_data = decrypt_image(nonce, tag, ciphertext, key)
write_file(decrypted_image_path, decrypted_image_data)

# Load the decrypted image using PIL
decrypted_image = Image.open(decrypted_image_path)

# Display the decrypted image
plt.figure(figsize=(5, 5))

plt.title("Decrypted Image")
plt.imshow(decrypted_image)
plt.axis('off')

plt.show()

print(f"Image decrypted and saved to {decrypted_image_path}")